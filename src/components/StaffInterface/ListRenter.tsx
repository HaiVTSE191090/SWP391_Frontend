import React, { useState, useEffect } from 'react';
import { Container, Table, Button, Badge, Spinner, Alert } from 'react-bootstrap';
import UserDetail from './UserDetail';
import OTPModal from './OTPModal';
import { getListRenter } from '../StaffInterface/services/authServices'; // üëà S·ª¨ D·ª§NG H√ÄM API ƒê√É S·ª¨A

// C·∫≠p nh·∫≠t Interface Renter ƒë·ªÉ kh·ªõp v·ªõi API data
interface Renter {
	renter_id: string | number; // S·ª≠ d·ª•ng t√™n c·ªôt DB
	full_name: string;
	phone_number: string;
	status: 'VERIFIED' | 'PENDING_VERIFICATION' | 'BLACKLISTED'; // S·ª≠ d·ª•ng gi√° tr·ªã ENUM DB
}

const ListRenter: React.FC = () => {
	const [renters, setRenters] = useState<Renter[]>([]);
	const [loading, setLoading] = useState<boolean>(true);
	const [error, setError] = useState<string>('');
	const [selectedRenterId, setSelectedRenterId] = useState<string | number | null>(null);

	// Fetch data t·ª´ API
	useEffect(() => {
		// üëà KI·ªÇM TRA TR∆Ø·ªöC KHI G·ªåI FETCH
		if (localStorage.getItem('staffToken')) {
			fetchRenters();
		} else {
			// X·ª≠ l√Ω khi kh√¥ng c√≥ token (ch∆∞a ƒëƒÉng nh·∫≠p)
			setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.');
			setLoading(false);
		}
	}, []);

	const fetchRenters = async () => {
		try {
			setLoading(true);
			setError('');

			// G·ªçi h√†m API th·ª±c t·∫ø ƒë√£ c√≥ Token trong Header
			const responseData = await getListRenter();

			// Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ m·∫£ng ng∆∞·ªùi thu√™
			setRenters(responseData);

			setLoading(false);
		} catch (err: any) {
			// B·∫Øt l·ªói t·ª´ API (c√≥ th·ªÉ l√† Token h·∫øt h·∫°n, 401, ho·∫∑c l·ªói Back-end)
			setError(err.message || 'C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu');
			setLoading(false);
		}
	};

	// Render badge theo tr·∫°ng th√°i
	const renderStatusBadge = (status?: string) => {
		switch (status) {
			case 'VERIFIED':
				return <Badge bg="success">ƒê√£ x√°c minh</Badge>;
			case 'PENDING_VERIFICATION':
				return <Badge bg="warning">Ch·ªù x√°c minh</Badge>;
			case 'BLACKLISTED':
				return <Badge bg="danger">Blacklisted</Badge>;
			default:
				return <Badge bg="secondary">Ch∆∞a r√µ</Badge>;
		}
	};

	// Handler cho n√∫t Verification Status
	const handleVerificationStatus = async (renterId: string | number) => {
		// TODO: Th√™m logic g·ªçi API ki·ªÉm tra tr·∫°ng th√°i x√°c minh
		console.log('Check verification status for renter:', renterId);
		alert(`Ki·ªÉm tra tr·∫°ng th√°i x√°c minh cho Renter ID: ${renterId}`);
	};

	// State cho OTP Modal
	const [showOTPModal, setShowOTPModal] = useState(false);
	const [otpRenterId, setOtpRenterId] = useState<string | number | null>(null);

	// Handler cho n√∫t Verify OTP link
	const handleVerifyOTP = (renterId: string | number) => {
		setOtpRenterId(renterId);
		setShowOTPModal(true);
	};

	// X·ª≠ l√Ω submit OTP
	const handleSubmitOTP = (otp: string) => {
		// TODO: G·ªçi API x√°c th·ª±c OTP v·ªõi otpRenterId v√† otp
		setShowOTPModal(false);
		setOtpRenterId(null);
		alert(`OTP x√°c th·ª±c th√†nh c√¥ng cho Renter ID: ${otpRenterId}, m√£ OTP: ${otp}`);
	};

	// Handler cho n√∫t Details
	const handleViewDetails = (renterId: string | number) => {
		setSelectedRenterId(renterId);
	};

	// Handler ƒë·ªÉ quay l·∫°i danh s√°ch
	const handleBack = () => {
		setSelectedRenterId(null);
		fetchRenters(); // Refresh l·∫°i danh s√°ch
	};

	// N·∫øu ƒëang xem chi ti·∫øt, hi·ªÉn th·ªã UserDetail
	if (selectedRenterId !== null) {
		return <UserDetail renterId={selectedRenterId} onBack={handleBack} />;
	}

	if (loading) {
		return (
			<Container className="mt-4 text-center">
				<Spinner animation="border" role="status" variant="primary">
					<span className="visually-hidden">ƒêang t·∫£i...</span>
				</Spinner>
				<p className="mt-2">ƒêang t·∫£i danh s√°ch ng∆∞·ªùi thu√™...</p>
			</Container>
		);
	}

	if (error) {
		return (
			<Container className="mt-4">
				<Alert variant="danger">
					<Alert.Heading>C√≥ l·ªói x·∫£y ra!</Alert.Heading>
					<p>{error}</p>
					<Button variant="outline-danger" onClick={fetchRenters}>
						Th·ª≠ l·∫°i
					</Button>
				</Alert>
			</Container>
		);
	}

	return (
		<Container fluid className="mt-4">
			<div className="d-flex justify-content-between align-items-center mb-4">
				<h2>Danh S√°ch Ng∆∞·ªùi Thu√™</h2>
				<Button variant="primary" onClick={fetchRenters}>
					<i className="bi bi-arrow-clockwise"></i> L√†m m·ªõi
				</Button>
			</div>

			<div className="table-responsive">
				<Table striped bordered hover>
					<thead className="table-dark">
						<tr>
							<th>ID</th>
							<th>Name</th>
							<th>Phone Number</th>
							<th>Verification Status</th>
							<th>Verify OTP Link</th>
							<th>Details</th>
						</tr>
					</thead>
					<tbody>
						{renters.length > 0 ? (
							renters.map((renter) => (
								// key ph·∫£i l√† ID duy nh·∫•t c·ªßa ng∆∞·ªùi thu√™
								<tr key={renter.renter_id}>
									{/* 1. Renter ID */}
									<td>{renter.renter_id}</td>
									{/* 2. T√™n ƒë·∫ßy ƒë·ªß */}
									<td>{renter.full_name}</td>
									{/* 3. S·ªë ƒëi·ªán tho·∫°i */}
									<td>{renter.phone_number}</td>
									{/* 4. Tr·∫°ng th√°i x√°c minh */}
									<td>
										{/* N√∫t ki·ªÉm tra tr·∫°ng th√°i */}
										<Button
											variant="info"
											size="sm"
											onClick={() => handleVerificationStatus(renter.renter_id)}
											className="me-2"
										>
											Ki·ªÉm tra
										</Button>
										{/* Badge hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√£ x√°c minh/ch·ªù */}
										{renderStatusBadge(renter.status)}
									</td>
									{/* 5. N√∫t X√°c th·ª±c OTP */}
									<td>
										<Button
											variant="warning"
											size="sm"
											onClick={() => handleVerifyOTP(renter.renter_id)}
										>
											X√°c th·ª±c OTP
										</Button>
									</td>
									{/* 6. N√∫t Xem chi ti·∫øt */}
									<td>
										<Button
											variant="primary"
											size="sm"
											onClick={() => handleViewDetails(renter.renter_id)}
										>
											Xem chi ti·∫øt
										</Button>
									</td>
								</tr>
							))
						) : (
							<tr>
								<td colSpan={6} className="text-center text-muted">
									Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi thu√™
								</td>
							</tr>
						)}
					</tbody>
				</Table>
			</div>

			{renters.length > 0 && (
				<div className="text-muted">
					<small>T·ªïng s·ªë ng∆∞·ªùi thu√™: {renters.length}</small>
				</div>
			)}
			{/* Popup OTP nh·∫≠p m√£ OTP */}
			<OTPModal
				show={showOTPModal}
				onSubmit={handleSubmitOTP}
				onCancel={() => { setShowOTPModal(false); setOtpRenterId(null); }}
			/>
		</Container>
	);
};

export default ListRenter;
